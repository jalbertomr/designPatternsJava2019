@startuml

class Client
note top:b = new ConcreteBuilder1()\nd = new Director(b)\nd = make()\nProduct1 p = b.getResult()
class Director {
- builder: Builder
+ Director( builder)
+ changeBuilder( builder)
+ make( type)
}
note bottom:builder.reset()\nif (type == simple){\n  builder.buildStepA()\n} else {\n  builder.buildStepB()\n  builder.buildStepZ()\n}
interface Builder {
+ reset()
+ builderStepA()
+ builderStepB()
+ builderStepZ()
}

Builder <-right-o Director
class "ConcreteBuilder1"{
- result: Product1
+ reset()
+ builderStepA()
+ builderStepB()
+ builderStepZ()
+ getResult(): Product1
}

class Product1
"ConcreteBuilder1" -->Product1:construct

class "ConcreteBuilder2"{
- result: Product2
+ reset()
+ builderStepA()
+ builderStepB()
+ builderStepZ()
+ getResult(): Product2
}

class Product2
"ConcreteBuilder2" -->Product2:construct

Builder <.."ConcreteBuilder1"
Builder <.."ConcreteBuilder2"

Client --> Director:uses\nto\ncreate
Client --> "ConcreteBuilder1":associates\nto\ndirector
Client --> "ConcreteBuilder2":associates\nto\ndirector
@enduml